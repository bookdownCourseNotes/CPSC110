[["index.html", "Systematic Program Design Chapter 1 Preamble 1.1 Caution 1.2 Course content", " Systematic Program Design Andrew Li 2021-02-21 Chapter 1 Preamble 1.1 Caution This book was made for studying purposes only. I will be adding notes from other sources and I may leave out some topics from the course. Also, I will not be purchasing or reading the supplemental text. As such, this is not a faithful representation of the course. 1.2 Course content Beginning student language Module overview Expressions Evaluations Strings and images Constant definitions Function definitions Booleans and if expressions Practice problems How to design functions Module overview HtDF recipe A simple practice problem When tests are incorrect Varying recipe order Poorly formed problems Practice problems How to design data Module overview cond expressions Data definitions Atomic non-distinct HtDF with non-primitive data HtDF X structure of data orthogonality Interval Enumeration Itemization HtDF with intervals HtDF with enumeration HtDF with itemization Structure of information flows through Practice problems How tio design worlds Module overview Interactivce programs The big-bang mechanism Domain analysis Program through main function Working through the wish list Improving a world program - Add SPEED Improving a world program - Add a key handler Practice problems Compound data Module overview Define-struct Compound data definitions Practice problems - Compound data HtDW with compound data Practice problems - HtDW with compound data How to design functions Module overview HtDF recipe A simple practice problem When tests are incorrect Varying recipe order Poorly formed problems Practice problems Self-reference Module overview Introduction to arbitrary sized data List mechanisms List Data definitions Function operating on list Revising the recipes for lists Designing with lists Positions in list templates Practice problems Reference Module overview The reference rule part 1 The reference rule part 2 The reference rule part 3 Practice problems Naturals Module overview Natural numbers A parlor trick Practice problems Helpers Module overview Introduction Function composition Laying out a list of images Operating on a list Domain knowledge shift The last helper Practice problems Binary search trees Module overview List abbreviations List of account BSTs A data definition for BSTs Lookup on BSTs REndering BSTs Practice problems Mutual reference Module overview Mutually recursive data Templating mutual recursion Functions on mutually recursive data part 1 Functions on mutually recursive data part 2 backtracking search Practice problems Two one-of types Module overview Cross product table Cross product code Practice problems Local Module overview Introduction Forming and intuition Lexical scoping Evaluation rules Encapsultaion Avoiding recomputation Practice problems Abstraction Module overview Introduction From examples 1 From examples 2 From examples 3 Using built in abstract functions Closures Fold functions Practice problems Generative recursion Module overview Introduction Fractals Termination arguments Practice problems Search Module overview Lambda expressions Introduction Sudoku – Terminology Sudoku – Data definitions and primitives Sudoku – The search intuition Sudoku – Making the wish list Sudoku – Making a wish come true part 1 Sudoku – Making a wish come true part 2 Sudoku – Making a wish come true part 3 Practice problems Accumulators Module overview Context preserving accumulators Sample problem: skipn Tail recursion Worklist accumulators 1 Worklist accumulators 2 Practice problems Graphs Module overview Introduction Constructing cyclic data Templating Problem: reachable? Practice problems "],["bsl.html", "Chapter 2 beginning student language 2.1 Module 2.2 Expressions 2.3 Evaluations 2.4 Strings and Images", " Chapter 2 beginning student language 2.1 Module This page provides an overview of the material for the first module of the course including topics, learning goals, estimate of time required and study tips. Each module of the course will start with a similar page which you can always access from the navigation bar to the left. In this course we use a specially designed programming language called Beginning Student Language (BSL). The BSL language is small and simple, and you will be able to learn most of it in this first module. Its simplicity has two benefits. First it allows us to spend more time on learning the design method which is the real focus of the course. In addition, because BSL forms the core of nearly every other language you will ever use, learning the design method using BSL will help you adapt the material you learn in this course to other programming languages. 2.1.1 Learning goals Be able to write expressions that operate on primitive data including numbers, strings, images and booleans. Be able to write constant and function definitions. Be able to write out the step-by-step evaluation of simple expressions including function calls. Be able to use the stepper to automatically step through the evaluation of an expression. Be able to use the Dr Racket help desk to discover new primitives. 2.2 Expressions Racket evaluates expressions to produce values (+ 3 4) ;This is an expression 7 ;This is a value To form an expression: (&lt;primitive&gt; &lt;expression&gt; ...) Here is a problem: Find the missing side of the length triangle via \\(\\sqrt{3^2 + 4^2}\\). Write the BSL expression that solves this. (sqrt (+ (sqr 3) (sqr 4))) 2.3 Evaluations We learned how to write expressions that operates on numbers, now we will look at the rules RAckert uses to evaluate those expressions. How does Racket evaluate this expressions to produce a value? (+ (* 3 4)(- (+ 1 2) 3)) (+ 2 12 (- (+ 1 2) 3)) ;step 1 (+ 2 12 (- 3 3)) ;step 2 (+ 2 12 0) ;step 3 14 ;step 4 To evaluate a primitive call: Reduce operands to values Then apply primitive to the values Intuitively, we go from left to right and inside to outside Some terminology: (* 3 4) ;This is called a primitive call - when it starts with open parenthesis and prmitive operations * ;In a primitive call, this is called the operator 3 &amp; 4 ;In primitive call, expressions following the operator are called operands 2.4 Strings and Images "],["literature.html", "Chapter 3 Literature", " Chapter 3 Literature Here is a review of existing methods. "],["methods.html", "Chapter 4 Methods", " Chapter 4 Methods We describe our methods in this chapter. "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],["references.html", "References", " References "]]
